import os
from util import merge, remove, pprint
from functools import reduce
# third-party
import jinja2 as j2
import yaml
import fabric.api as fab


def config():
    defaults = {
        'generated_message': 'This file is generated by Fabric, all changes will be lost'
    }
    return reduce(merge, [
        dict(defaults),
        yaml.load(open('vars.yml')),
        yaml.load(open('vars/secrets.yml'))
    ])


def init():
    for role in cfg['roles']:
        if role != 'all':
            for host in cfg['roles'][role].get('hosts', []):
                # plug into fabric
                fab.env.roledefs.setdefault(role, []).append(host)


# global state

cfg = config()
templates_path = os.path.join(os.path.dirname(__file__), 'templates')
j2env = j2.Environment(loader=j2.FileSystemLoader(templates_path),
                       undefined=j2.StrictUndefined,
                       trim_blocks=True)
# fabric setup
init()


def environment(roles=None, host=None):
    if roles is None:
        roles = fab.env.roles
    if host is None:
        host = fab.env.host
    if not host:
        fab.warn('no host')
    role_configs = [cfg['roles'][role] for role in roles]
    global_vars = remove(cfg, ['roles', 'hosts'])
    return reduce(merge, [global_vars, cfg['hosts'][host] if host else [], cfg['roles']['all']] + role_configs)


def render_templates(env, names):
    return {name: j2env.get_template(name).render(env) for name in names}


@fab.task
def print_env():
    pprint(environment())


@fab.task
def push_configs():
    # TODO diff, confirm (wrap potentially dangerous operations)
    result = render_templates(environment(), ['settings.php.j2', 'dbconn.php.j2'])
    for tpl in result:
        with open('/tmp/{}'.format(tpl), 'w') as file:
            file.write(result[tpl])


@fab.task(alias='gitftp')
def git_ftp(args):
    ftp = environment()['ftp']
    git_ftp_args = ['--user', ftp['user'], '--passwd', ftp['password'], ftp['url']]
    fab.local('git-ftp {} {}'.format(args, ' '.join(git_ftp_args)))

@fab.task
def deploy():
    # TODO
    # maintenance mode on
    # push configs
    # push staging robots.txt
    # local composer install
    # local npm install
    # local build assets
    # sync directories: build, composer vendor, mockup
    # git-ftp push
    # clear bitrix cache
    # notify in slack
    # maintenance mode off
    pass
