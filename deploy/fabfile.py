import os
import time
import shutil
from util import merge, remove, pprint
from functools import reduce
# third-party
import jinja2 as j2
import yaml
import fabric.api as fab
import fabric.contrib.console as console
from fabric.context_managers import lcd

templates = {
    'settings.php.j2': 'bitrix/.settings.php',
    'dbconn.php.j2': 'bitrix/php_interface/dbconn.php'
}
asset_build_command = './build.sh'
git_ftp_syncroot = 'public'


def config():
    defaults = {
        'generated_message': 'This file is generated by Fabric, all changes will be lost'
    }
    return reduce(merge, [
        dict(defaults),
        yaml.load(open('vars.yml')),
        yaml.load(open('vars/secrets.yml'))
    ])


def init():
    for role in cfg['roles']:
        if role != 'all':
            for host in cfg['roles'][role].get('hosts', []):
                # plug into fabric
                fab.env.roledefs.setdefault(role, []).append(host)


# global state

cfg = config()
templates_path = os.path.join(os.path.dirname(__file__), 'templates')
j2env = j2.Environment(loader=j2.FileSystemLoader(templates_path),
                       undefined=j2.StrictUndefined,
                       trim_blocks=True,
                       lstrip_blocks=True)
# fabric setup
init()


def environment(roles=None, host=None):
    if roles is None:
        roles = fab.env.roles
    if host is None:
        host = fab.env.host
    if not host:
        fab.warn('no host')
    role_configs = [cfg['roles'][role] for role in roles]
    global_vars = remove(cfg, ['roles', 'hosts'])
    return reduce(merge, [global_vars, cfg['hosts'][host] if host else [], cfg['roles']['all']] + role_configs)


def backup_filename(filename):
    return '{}.{}~'.format(filename, time.strftime('%Y-%m-%d@%H:%M:%S'))


def backup_file(path):
    # TODO implement remote/ftp
    if os.path.exists(path):
        [directory, filename] = os.path.split(path)
        dest = os.path.join(directory, backup_filename(filename))
        shutil.copy(path, dest)
        fab.puts('backup created: {}'.format(dest))


def write_file(env, path, contents, backup=True):
    # TODO implement remote/ftp
    assert env['local']
    if backup:
        # TODO only if it's changed
        backup_file(path)
    console.confirm('write to {}?'.format(path))
    with open(path, 'w') as file:
        file.write(contents)


def copy_file(env, src, dest, backup=True):
    # TODO implement remote/ftp
    assert env['local'] and os.path.exists(src)
    if backup:
        # TODO only if it's changed
        backup_file(dest)
    console.confirm('write to {}?'.format(dest))
    shutil.copy2(src, dest)


# TODO refactor
def docroot_path(env, rel_path):
    # TODO remote/ftp
    return os.path.join(env['document_root'], rel_path)


@fab.task
def print_env():
    pprint(environment())


@fab.task
def push_configs():
    env = environment()
    # TODO local only for now
    assert env['document_root']
    # TODO diff with existing and print
    for name, rel_path in templates.items():
        # TODO contents formatting is messed up right now
        contents = j2env.get_template(name).render(env)
        write_file(env, docroot_path(env, rel_path), contents)


@fab.task(alias='gitftp')
def git_ftp(args):
    ftp = environment()['ftp']
    git_ftp_args = ['--user', ftp['user'], '--passwd', ftp['password'], ftp['url'], '--syncroot', git_ftp_syncroot]
    with lcd('..'):
    fab.local('git-ftp {} {}'.format(args, ' '.join(git_ftp_args)))


@fab.task
def push_robots():
    env = environment()
    if 'stage' in fab.env.roles:
        fab.puts('copying staging robots.txt')
        copy_file(env, 'files/stage/robots.txt', docroot_path(env, 'robots.txt'))


@fab.task(default=True)
def deploy():
    env = environment()
    remote = not env['local']
    # if env['local']:
    #     fab.abort('you are trying to deploy to local environment')
    # TODO
    # maintenance mode on
    # push configs
    fab.execute(push_configs)
    # push staging robots.txt
    fab.execute(push_robots)
    # TODO refactor cwd
    cwd = '../public/local'
    with lcd(cwd):
        # local composer install
        if os.path.exists(os.path.join(cwd, 'composer.json')):
            fab.local('composer install')
        # local npm install and build assets
        fab.local(asset_build_command)
    if remote:
        # sync directories: build, composer vendor, mockup
        # git-ftp push
        fab.execute(git_ftp, 'push')
    # clear bitrix cache?
    # migrate db
    # notify in slack if remote
    # maintenance mode off
    pass
